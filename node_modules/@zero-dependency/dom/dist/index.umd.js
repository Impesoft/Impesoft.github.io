(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@zero-dependency/dom"] = {}));
})(this, (function (exports) { 'use strict';

  function el(tag, attributes, ...children) {
    const el2 = document.createElement(tag);
    if (typeof attributes === "string") {
      el2.append(text(attributes));
    } else if (Array.isArray(attributes)) {
      el2.append(...attributes);
    } else {
      Object.assign(el2, attributes);
      Object.assign(el2.style, attributes?.style);
    }
    if (children.length) {
      el2.append(...children);
    }
    return el2;
  }
  function text(str) {
    return document.createTextNode(str);
  }
  function nbsp() {
    return text("\xA0");
  }
  async function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve(), {
          once: true
        });
      } else {
        resolve();
      }
    });
  }

  function observeElement(el, callback, options) {
    const observe = new MutationObserver((mutations, observer) => {
      for (const mutation of mutations) {
        callback(mutation, observer);
      }
    });
    observe.observe(el, {
      childList: true,
      subtree: true,
      ...options
    });
    return observe;
  }

  function waitElement(selector, target = document.documentElement) {
    return new Promise((resolve) => {
      function resolveElement() {
        const el = target.querySelector(selector);
        if (el) {
          resolve(el);
        }
      }
      observeElement(target, (_, observer) => {
        resolveElement();
        observer.disconnect();
      });
    });
  }

  class n {
    #t = {};
    on(t, e) {
      const s = this.#t[t];
      return s ? s.push(e) : this.#t[t] = [e], this;
    }
    addListener(t, e) {
      return this.on(t, e);
    }
    once(t, e) {
      const s = (...i) => {
        this.off(t, s), e(...i);
      };
      return this.on(t, s), this;
    }
    emit(t, ...e) {
      const s = this.#t[t] || [];
      for (let i = 0; i < s.length; i++)
        s[i](...e);
      return Boolean(s.length);
    }
    off(t, e) {
      return this.#t[t] && (this.#t[t] = this.#t[t].filter((s) => s !== e)), this;
    }
    removeListener(t, e) {
      return this.off(t, e);
    }
    removeAllListeners(t) {
      return t ? delete this.#t[t] : this.#t = {}, this;
    }
    eventNames() {
      return Reflect.ownKeys(this.#t);
    }
    listeners(t) {
      return this.#t[t];
    }
    listenerCount(t) {
      return this.#t[t]?.length ?? 0;
    }
  }

  class LocationObserver extends n {
    constructor() {
      super();
      const { history, location } = window;
      const { pushState, replaceState } = history;
      history.pushState = (...args) => {
        pushState.apply(history, args);
        this.emit("pushState", location, args[0]);
      };
      history.replaceState = (...args) => {
        replaceState.apply(history, args);
        this.emit("replaceState", location, args[0]);
      };
      window.addEventListener("popstate", ({ state }) => {
        this.emit("popState", location, state);
      });
    }
  }

  exports.LocationObserver = LocationObserver;
  exports.domReady = domReady;
  exports.el = el;
  exports.nbsp = nbsp;
  exports.observeElement = observeElement;
  exports.text = text;
  exports.waitElement = waitElement;

  Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

}));
//# sourceMappingURL=index.umd.js.map

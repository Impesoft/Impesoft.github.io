import type { EventMap, TypedEventEmitter } from './types.js';
export declare class Emitter<T extends EventMap> implements TypedEventEmitter<T> {
    #private;
    on<E extends keyof T>(event: E, listener: T[E]): this;
    addListener<E extends keyof T>(event: E, listener: T[E]): this;
    once<E extends keyof T>(event: E, listener: T[E]): this;
    emit<E extends keyof T>(event: E, ...args: Parameters<T[E]>): boolean;
    off<E extends keyof T>(event: E, listener: T[E]): this;
    removeListener<E extends keyof T>(event: E, listener: T[E]): this;
    removeAllListeners<E extends keyof T>(event?: E): this;
    eventNames(): (string | symbol | keyof T)[];
    listeners<E extends keyof T>(event: E): T[E][];
    listenerCount<E extends keyof T>(event: E): number;
}

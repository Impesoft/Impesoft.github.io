class n {
  #t = {};
  on(t, e) {
    const s = this.#t[t];
    return s ? s.push(e) : this.#t[t] = [e], this;
  }
  addListener(t, e) {
    return this.on(t, e);
  }
  once(t, e) {
    const s = (...i) => {
      this.off(t, s), e(...i);
    };
    return this.on(t, s), this;
  }
  emit(t, ...e) {
    const s = this.#t[t] || [];
    for (let i = 0; i < s.length; i++)
      s[i](...e);
    return Boolean(s.length);
  }
  off(t, e) {
    return this.#t[t] && (this.#t[t] = this.#t[t].filter((s) => s !== e)), this;
  }
  removeListener(t, e) {
    return this.off(t, e);
  }
  removeAllListeners(t) {
    return t ? delete this.#t[t] : this.#t = {}, this;
  }
  eventNames() {
    return Reflect.ownKeys(this.#t);
  }
  listeners(t) {
    return this.#t[t];
  }
  listenerCount(t) {
    return this.#t[t]?.length ?? 0;
  }
}
export {
  n as Emitter
};
//# sourceMappingURL=index.es.js.map
